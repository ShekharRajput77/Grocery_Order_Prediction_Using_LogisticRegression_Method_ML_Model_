# -*- coding: utf-8 -*-
"""Grocery_Order_Prediction_Using_LogisticRegression_Method_ML_Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-gm2UZvyP8Y8qm_oxEmZQlKtLll2B2ib
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from google.colab import files
import io

#Load the data
uploaded_train = files.upload()
filename_train = list(uploaded_train.keys())[0]
df_train = pd.read_csv(io.BytesIO(uploaded_train[filename_train]), na_filter = False)

uploaded_predict = files.upload()
filename_predict = list(uploaded_predict.keys())[0]
df_predict = pd.read_csv(io.BytesIO(uploaded_predict[filename_predict]), na_filter = False)

#filling the missing values
for col in df_train.columns:
  if df_train[col].dtype == 'object':  #for all the string data
      df_train[col] = df_train[col].fillna(df_train[col].mode()[0])
  else:
    df_train[col] = df_train[col].fillna(df_train[col].mean()) #for all the int and float values.

label_encoder = {}
for col in df_train.columns:
  if df_train[col].dtype == 'object':
    le = LabelEncoder()
    df_train[col] = le.fit_transform(df_train[col])
    label_encoder[col] = le   #store the encoder, if you need to revert the num value to the object

#fill the status column
if df_train['status'].dtype == 'object':
  df_train['status'] = df_train['status'].map({"Not_Canceled": 0, "Canceled": 1})


#all the dependent variables are x and independent is y
x = df_train.drop('status', axis = 1)
y = df_train['status']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)

#same steps as train data_set
for col in df_predict.columns:
    if df_predict[col].dtype == 'object':
        df_predict[col] = df_predict[col].fillna(df_predict[col].mode()[0])
    else:
        df_predict[col] = df_predict[col].fillna(df_predict[col].mean())

for col in df_predict.columns:
    if df_predict[col].dtype == 'object':
        le = LabelEncoder()
        df_predict[col] = le.fit_transform(df_predict[col])

model = LogisticRegression(max_iter=6000)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")

# apply the logic on predict data for predications
predictions = model.predict(df_predict)

df_predict['status'] = predictions

#Download updated csv
df_predict.to_csv('Updated_csv_of_predict_dataset.csv', index = False) #To Avoid writing the index
files.download('Updated_csv_of_predict_dataset.csv')